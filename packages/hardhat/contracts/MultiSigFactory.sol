// SPDX-License-Identifier: MIT
pragma solidity >=0.8.0 <0.9.0;

// import "hardhat/console.sol";
import "@openzeppelin/contracts/utils/Create2.sol";

import "./MultiSigWallet.sol";

contract MultiSigFactory {
    MultiSigWallet[] public multiSigs;
    mapping(address => bool) existsMultiSig;

  event Create(
    uint indexed contractId,
    address indexed contractAddress,
    address creator,
    address[] owners,
    uint signaturesRequired
  );

    event Create2Event(
        uint256 indexed contractId,
        string name,
        address indexed contractAddress,
        address creator,
        address[] owners,
        uint256 signaturesRequired
    );


    event Owners(
        address indexed contractAddress,
        address[] owners,
        uint256 indexed signaturesRequired
    );


  constructor() {}

  modifier onlyRegistered() {
    require(existsMultiSig[msg.sender], "caller not registered to use logger");
    _;
  }

  function emitOwners(
    address _contractAddress,
    address[] memory _owners,
    uint256 _signaturesRequired
  ) external onlyRegistered {
    emit Owners(_contractAddress, _owners, _signaturesRequired);
  }

  function create(
    uint256 _chainId,
    address[] memory _owners,
    uint _signaturesRequired
  ) public payable {
    uint id = numberOfMultiSigs();

    address payable addr;
    uint256 salt = 1;
    bytes memory contractBytecode = "0x6080604052600436106100ec5760003560e01c806365af1bed1161008a578063b280a3c711610059578063b280a3c7146102c2578063ce757d29146102d5578063d1fbffa0146102eb578063d41304861461030b57600080fd5b806365af1bed1461026157806393fd1844146102815780639a8a059214610296578063affed0e0146102ac57600080fd5b80632f54bf6e116100c65780632f54bf6e146101b15780633034a742146101f15780633bad542614610213578063545a4a3c1461023357600080fd5b8063025e7c271461013257806306fdde031461016f57806319045a251461019157600080fd5b3661012d576040805134815247602082015233917f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a15910160405180910390a2005b600080fd5b34801561013e57600080fd5b5061015261014d366004611541565b610321565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561017b57600080fd5b5061018461034b565b60405161016691906117c4565b34801561019d57600080fd5b506101526101ac3660046114fc565b6103d9565b3480156101bd57600080fd5b506101e16101cc3660046113be565b60026020526000908152604090205460ff1681565b6040519015158152602001610166565b3480156101fd57600080fd5b5061021161020c366004611541565b610443565b005b34801561021f57600080fd5b5061021161022e3660046114d1565b6104b4565b34801561023f57600080fd5b5061025361024e366004611559565b61064e565b604051908152602001610166565b34801561026d57600080fd5b5061021161027c3660046114d1565b61068d565b34801561028d57600080fd5b50600354610253565b3480156102a257600080fd5b5061025360065481565b3480156102b857600080fd5b5061025360055481565b6102116102d03660046115ba565b610808565b3480156102e157600080fd5b5061025360045481565b3480156102f757600080fd5b506101846103063660046113da565b610a24565b34801561031757600080fd5b5061025360015481565b6003818154811061033157600080fd5b6000918252602090912001546001600160a01b0316905081565b600780546103589061196e565b80601f01602080910402602001604051908101604052809291908181526020018280546103849061196e565b80156103d15780601f106103a6576101008083540402835291602001916103d1565b820191906000526020600020905b8154815290600101906020018083116103b457829003601f168201915b505050505081565b600061043c82610436856040517f19457468657265756d205369676e6564204d6573736167653a0a3332000000006020820152603c8101829052600090605c01604051602081830303815290604052805190602001209050919050565b90610d24565b9392505050565b33301461046b5760405162461bcd60e51b815260040161046290611885565b60405180910390fd5b60048190558061048d5760405162461bcd60e51b8152600401610462906117d7565b60045460035410156104b15760405162461bcd60e51b81526004016104629061181b565b50565b3330146104d35760405162461bcd60e51b815260040161046290611885565b6001600160a01b03821660009081526002602052604090205460ff1661053b5760405162461bcd60e51b815260206004820152601760248201527f72656d6f76655369676e65723a206e6f74206f776e65720000000000000000006044820152606401610462565b61054482610d48565b60048190556001600160a01b03821660008181526002602090815260409182902054915160ff909216151582527ffe545f48304051c4029eb2da9927daa59da0414b4b084fdceaf2955b609b899e91015b60405180910390a2600054604051632fb7d0a560e21b81526001600160a01b039091169063bedf4294906105d2903090600390869060040161175f565b600060405180830381600087803b1580156105ec57600080fd5b505af1158015610600573d6000803e3d6000fd5b505050506000600454116106265760405162461bcd60e51b8152600401610462906117d7565b600454600354101561064a5760405162461bcd60e51b81526004016104629061181b565b5050565b6000306006548686868660405160200161066d96959493929190611696565b604051602081830303815290604052805190602001209050949350505050565b3330146106ac5760405162461bcd60e51b815260040161046290611885565b6001600160a01b0382166107025760405162461bcd60e51b815260206004820152601760248201527f6164645369676e65723a207a65726f20616464726573730000000000000000006044820152606401610462565b6001600160a01b03821660009081526002602052604090205460ff161561076b5760405162461bcd60e51b815260206004820152601b60248201527f6164645369676e65723a206f776e6572206e6f7420756e6971756500000000006044820152606401610462565b6001600160a01b038216600081815260026020908152604091829020805460ff1916600190811782556003805491820190557fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b0180546001600160a01b03191685179055600485905554915160ff909216151582527ffe545f48304051c4029eb2da9927daa59da0414b4b084fdceaf2955b609b899e9101610595565b6000546001600160a01b0316331461081f57600080fd5b600481905560005b82518110156109d657600083828151811061085257634e487b7160e01b600052603260045260246000fd5b6020026020010151905060006001600160a01b0316816001600160a01b031614156108bf5760405162461bcd60e51b815260206004820152601960248201527f636f6e7374727563746f723a207a65726f2061646472657373000000000000006044820152606401610462565b6001600160a01b03811660009081526002602052604090205460ff16156109285760405162461bcd60e51b815260206004820152601d60248201527f636f6e7374727563746f723a206f776e6572206e6f7420756e697175650000006044820152606401610462565b6001600160a01b038116600081815260026020908152604091829020805460ff1916600190811782556003805491820190557fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b0180546001600160a01b0319168517905554915160ff909216151582527ffe545f48304051c4029eb2da9927daa59da0414b4b084fdceaf2955b609b899e910160405180910390a250806109ce816119a9565b915050610827565b5060068390556004546109fb5760405162461bcd60e51b8152600401610462906117d7565b6004546003541015610a1f5760405162461bcd60e51b81526004016104629061181b565b505050565b3360009081526002602052604090205460609060ff16610a725760405162461bcd60e51b81526020600482015260096024820152682737ba1037bbb732b960b91b6044820152606401610462565b6000610a8260055487878761064e565b600580549192506000610a94836119a9565b919050555060008060005b8551811015610ba3576000610adb85888481518110610ace57634e487b7160e01b600052603260045260246000fd5b60200260200101516103d9565b9050826001600160a01b0316816001600160a01b031611610b5c5760405162461bcd60e51b815260206004820152603560248201527f657865637574655472616e73616374696f6e3a206475706c6963617465206f7260448201527420756e6f726465726564207369676e61747572657360581b6064820152608401610462565b6001600160a01b038116600090815260026020526040902054909250829060ff1615610b905783610b8c816119a9565b9450505b5080610b9b816119a9565b915050610a9f565b50600454821015610c0e5760405162461bcd60e51b815260206004820152602f60248201527f657865637574655472616e73616374696f6e3a206e6f7420656e6f756768207660448201526e616c6964207369676e61747572657360881b6064820152608401610462565b600080896001600160a01b03168989604051610c2a91906116f1565b60006040518083038185875af1925050503d8060008114610c67576040519150601f19603f3d011682016040523d82523d6000602084013e610c6c565b606091505b509150915081610cbe5760405162461bcd60e51b815260206004820152601d60248201527f657865637574655472616e73616374696f6e3a207478206661696c65640000006044820152606401610462565b336001600160a01b03167f9053e9ec105157fac8c9308d63e6b22be5f50fe915a3e567419b624311a02d748b8b8b6001600554610cfb9190611914565b8a87604051610d0f9695949392919061170d565b60405180910390a29998505050505050505050565b6000806000610d338585610fc6565b91509150610d4081611036565b509392505050565b6001600160a01b0381166000908152600260205260408120805460ff19169055600354908167ffffffffffffffff811115610d9357634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610dbc578160200160208202803683370190505b5090506000610dcc600184611914565b90505b836001600160a01b031660038281548110610dfa57634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b031614610ed95760038181548110610e3557634e487b7160e01b600052603260045260246000fd5b9060005260206000200160009054906101000a90046001600160a01b0316828281518110610e7357634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b0316815250506003805480610eb257634e487b7160e01b600052603160045260246000fd5b600082815260209020810160001990810180546001600160a01b0319169055019055610fae565b6003805480610ef857634e487b7160e01b600052603160045260246000fd5b600082815260209020810160001990810180546001600160a01b0319169055019055805b610f27600185611914565b811015610fa757600383610f3c8360016118fc565b81518110610f5a57634e487b7160e01b600052603260045260246000fd5b60209081029190910181015182546001810184556000938452919092200180546001600160a01b0319166001600160a01b0390921691909117905580610f9f816119a9565b915050610f1c565b5050505050565b80610fb881611957565b915050610dcf565b50505050565b600080825160411415610ffd5760208301516040840151606085015160001a610ff187828585611237565b9450945050505061102f565b825160401415611027576020830151604084015161101c868383611324565b93509350505061102f565b506000905060025b9250929050565b600081600481111561105857634e487b7160e01b600052602160045260246000fd5b14156110615750565b600181600481111561108357634e487b7160e01b600052602160045260246000fd5b14156110d15760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610462565b60028160048111156110f357634e487b7160e01b600052602160045260246000fd5b14156111415760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610462565b600381600481111561116357634e487b7160e01b600052602160045260246000fd5b14156111bc5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b6064820152608401610462565b60048160048111156111de57634e487b7160e01b600052602160045260246000fd5b14156104b15760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b6064820152608401610462565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a083111561126e575060009050600361131b565b8460ff16601b1415801561128657508460ff16601c14155b15611297575060009050600461131b565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa1580156112eb573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166113145760006001925092505061131b565b9150600090505b94509492505050565b6000806001600160ff1b03831660ff84901c601b0161134587828885611237565b935093505050935093915050565b600082601f830112611363578081fd5b813567ffffffffffffffff81111561137d5761137d6119da565b611390601f8201601f19166020016118a7565b8181528460208386010111156113a4578283fd5b816020850160208301379081016020019190915292915050565b6000602082840312156113cf578081fd5b813561043c816119f0565b600080600080608085870312156113ef578283fd5b84356113fa816119f0565b93506020858101359350604086013567ffffffffffffffff8082111561141e578485fd5b61142a89838a01611353565b9450606088013591508082111561143f578384fd5b818801915088601f830112611452578384fd5b8135611465611460826118d8565b6118a7565b8082825285820191508585018c878560051b8801011115611484578788fd5b875b848110156114bd5781358681111561149c57898afd5b6114aa8f8a838b0101611353565b8552509287019290870190600101611486565b505080965050505050505092959194509250565b600080604083850312156114e3578182fd5b82356114ee816119f0565b946020939093013593505050565b6000806040838503121561150e578182fd5b82359150602083013567ffffffffffffffff81111561152b578182fd5b61153785828601611353565b9150509250929050565b600060208284031215611552578081fd5b5035919050565b6000806000806080858703121561156e578384fd5b843593506020850135611580816119f0565b925060408501359150606085013567ffffffffffffffff8111156115a2578182fd5b6115ae87828801611353565b91505092959194509250565b6000806000606084860312156115ce578283fd5b8335925060208085013567ffffffffffffffff8111156115ec578384fd5b8501601f810187136115fc578384fd5b803561160a611460826118d8565b8082825284820191508484018a868560051b8701011115611629578788fd5b8794505b83851015611654578035611640816119f0565b83526001949094019391850191850161162d565b5096999698505050506040949094013593505050565b6000815180845261168281602086016020860161192b565b601f01601f19169290920160200192915050565b60006bffffffffffffffffffffffff19808960601b168352876014840152866034840152808660601b1660548401525083606883015282516116df81608885016020870161192b565b91909101608801979650505050505050565b6000825161170381846020870161192b565b9190910192915050565b60018060a01b038716815285602082015260c06040820152600061173460c083018761166a565b85606084015284608084015282810360a0840152611752818561166a565b9998505050505050505050565b60006060820160018060a01b03808716845260206060818601528287548085526080870191508886528286209450855b818110156117ad57855485168352600195860195928401920161178f565b505080945050505050826040830152949350505050565b60208152600061043c602083018461166a565b60208082526024908201527f4d757374206265206e6f6e2d7a65726f207369676e61747572657320726571756040820152631a5c995960e21b606082015260800190565b60208082526044908201527f4d757374206265206174206c65617374207468652073616d6520616d6f756e7460408201527f206f66207369676e657273207468616e207369676e61747572657320726571756060820152631a5c995960e21b608082015260a00190565b6020808252600890820152672737ba1029b2b63360c11b604082015260600190565b604051601f8201601f1916810167ffffffffffffffff811182821017156118d0576118d06119da565b604052919050565b600067ffffffffffffffff8211156118f2576118f26119da565b5060051b60200190565b6000821982111561190f5761190f6119c4565b500190565b600082821015611926576119266119c4565b500390565b60005b8381101561194657818101518382015260200161192e565b83811115610fc05750506000910152565b600081611966576119666119c4565b506000190190565b600181811c9082168061198257607f821691505b602082108114156119a357634e487b7160e01b600052602260045260246000fd5b50919050565b60006000198214156119bd576119bd6119c4565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146104b157600080fdfea2646970667358221220220b613c3b07c761d7b6f730096e447952cf1951e310b2d5e2c83406a45e512a64736f6c63430008040033";

    contractBytecode = abi.encodePacked(contractBytecode, abi.encode(_chainId, _owners, _signaturesRequired, address(this)));

    assembly {
        addr := create2(0, add(contractBytecode, 0x20), mload(contractBytecode), salt)

        if iszero(extcodesize(addr)) {
            revert(0, 0)
        }
    }


    //MultiSigWallet multiSig = (new MultiSigWallet){value: msg.value}(_chainId, _owners, _signaturesRequired, address(this));
    MultiSigWallet multiSig = MultiSigWallet(addr);

    multiSigs.push(multiSig);
    existsMultiSig[address(multiSig)] = true;

    emit Create(id, address(multiSig), msg.sender, _owners, _signaturesRequired);
    emit Owners(address(multiSig), _owners, _signaturesRequired);
  }

  function numberOfMultiSigs() public view returns(uint) {
    return multiSigs.length;
  }

  function getMultiSig(uint256 _index)
    public
    view
    returns (
      address multiSigAddress,
      uint signaturesRequired,
      uint balance
    ) {
      MultiSigWallet multiSig = multiSigs[_index];
      return (address(multiSig), multiSig.signaturesRequired(), address(multiSig).balance);
    }

// naim create2 implimentation
    function create2(
        uint256 _chainId,
        address[] memory _owners,
        uint256 _signaturesRequired,
        bytes32 _salt,
        string memory _name
    ) public payable {
        uint256 id = numberOfMultiSigs();

        /**----------------------
         * create2 implementation
         * ---------------------*/
        address multiSig_address = payable(
            Create2.deploy(
                msg.value,
                _salt,
                abi.encodePacked(
                    type(MultiSigWallet).creationCode,
                    abi.encode(_name, address(this), _chainId, _owners, _signaturesRequired)
                )
            )
        );

        MultiSigWallet multiSig = MultiSigWallet(payable(multiSig_address));

        multiSigs.push(multiSig);
        existsMultiSig[address(multiSig_address)] = true;

        emit Create2Event(
            id,
            _name,
            address(multiSig),
            msg.sender,
            _owners,
            _signaturesRequired
        );
        emit Owners(address(multiSig), _owners, _signaturesRequired);
    }

    /**----------------------
     * get a computed address
     * ---------------------*/
    function computedAddress(
        uint256 _chainId,
        address[] memory _owners,
        uint256 _signaturesRequired,
        bytes32 _salt,
        string memory _name
    )
        public
        view
        returns (address)
    {
        bytes32 bytecodeHash = keccak256(
            abi.encodePacked(
                type(MultiSigWallet).creationCode,
                abi.encode(_name, address(this), _chainId, _owners, _signaturesRequired)
            )
        );
        address computed_address = Create2.computeAddress(_salt, bytecodeHash);

        return computed_address;
    }


}
